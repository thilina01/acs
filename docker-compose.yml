services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080" # Dashboard
    networks:
      - acs-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  auth-service:
    build: ./auth-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - acs-network
    depends_on:
      - postgres
      - redis

  report-service:
    build: ./report-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.report.rule=PathPrefix(`/report`)"
      - "traefik.http.services.report.loadbalancer.server.port=8080"
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - acs-network

  user-service:
    build: ./user-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/users`)"
      - "traefik.http.services.user.loadbalancer.server.port=8080"
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - acs-network

  sms-service:
    build: ./sms-service
    depends_on:
      - kafka
    networks:
      - acs-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sms.rule=PathPrefix(`/sms`)"
      - "traefik.http.services.sms.loadbalancer.server.port=8080"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - acs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:15
    container_name: acs-postgres
    environment:
      POSTGRES_DB: acsdb
      POSTGRES_USER: acsuser
      POSTGRES_PASSWORD: acspass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - acs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acsuser -d acsdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - acs-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - acs-network

volumes:
  postgres_data:

networks:
  acs-network:
    driver: bridge
